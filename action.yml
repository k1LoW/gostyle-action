name: 'gostyle-action'
description: 'Run gostyle'
inputs:
  github-token:
    description: The GitHub token
    default: ${{ github.token }}
    required: false
  # inputs for actions/checkout
  repo-checkout:
    description: "Checkout the repository"
    required: false
    default: false
  # inputs for actions/setup-go
  setup-go:
    description: "Set up Go"
    required: false
    default: false
  go-version-input:
    description: 'Version of Go to use for gostyle'
    required: false
  check-latest:
    description: 'Set this option to true if you want the action to always check for the latest available Go version that satisfies the version spec'
    required: false
    default: false
  cache:
    description: 'Used to specify whether Go caching is needed. Set to true, if you would like to enable caching.'
    required: false
    default: true
  go-package:
    description: 'Go Package to scan with gostyle'
    required: false
    default: './...'
  go-version-file:
    description: 'Path to the go.mod or go.work file.'
    required: false
  # inputs for reviewdog
  use-reviewdog:
    description: 'Use reviewdog'
    required: false
    default: true
  reviewdog-version:
    description: 'Version of reviewdog'
    required: false
    default: 'latest'
  reviewdog-reporter:
    description: 'Reporter of reviewdog command [github-pr-check,github-pr-review,github-check].'
    required: false
    default: "github-pr-check"
  reviewdog-tool-name:
    description: "Tool name to use for reviewdog reporter"
    required: false
    default: "gostyle"
  reviewdog-filter-mode:
    description: "Filtering for the reviewdog command [added,diff_context,file,nofilter]."
    required: false
    default: "added"
  # inputs for gostyle
  work-dir:
    description: 'Directory in which to run gostyle'
    required: false
    default: '.'
  config-file:
    description: 'Config file path for gostyle.'
    required: false
    default: ''
  flags:
    description: 'Flags for gostyle'
    required: false
    default: ''
  version:
    description: 'Version of gostyle'
    required: false
    default: 'latest'
  fail-on-error:
    description: 'Fail on gostyle error'
    required: false
    default: true
runs:
  using: "composite"
  steps:
    - if: inputs.repo-checkout != 'false'
      uses: actions/checkout@v4
    - if: inputs.setup-go != 'false'
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version-input }}
        check-latest: ${{ inputs.check-latest }}
        go-version-file: ${{ inputs.go-version-file }}
        cache: ${{ inputs.cache }}
    - name: Install gostyle
      run: go install github.com/k1LoW/gostyle@${{ inputs.version }}
      shell: bash
    - name: Install reviewdog
      if: inputs.use-reviewdog != 'false'
      run: go install github.com/reviewdog/reviewdog/cmd/reviewdog@${{ inputs.reviewdog-version }}
      shell: bash
    - name: Set flags
      id: flags
      run: |
        if [ -z "${{ inputs.config-file }}" ]; then echo "FLAGS=${{ inputs.flags }}" >> "$GITHUB_OUTPUT"; fi
        if [ -n "${{ inputs.config-file }}" ]; then echo "FLAGS=-gostyle.config=${PWD}/${{ inputs.work-dir }}/${{ inputs.config-file }}" >> "$GITHUB_OUTPUT"; fi
      shell: bash
    - name: Set pipe
      id: pipe
      if: inputs.use-reviewdog != 'false'
      run: |
        echo 'PIPE=|& reviewdog -name=${{ inputs.reviewdog-tool-name }} -f=govet -filter-mode="${{ inputs.reviewdog-filter-mode }}" --reporter=${{ inputs.reviewdog-reporter }} --tee' >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Set fail-on-error
      id: failonerror
      if: inputs.fail-on-error == 'false' || inputs.use-reviewdog != 'false'
      run: |
        echo 'FAILONERROR=|| true' >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Set fail-on-error
      id: reviewdog-failonerror
      if: inputs.use-reviewdog != 'false' && inputs.fail-on-error != 'false'
      run: |
        echo 'FAILONERROR=-fail-on-error' >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Run gostyle
      run: (go vet -vettool=`which gostyle` ${{ steps.flags.outputs.FLAGS }} ${{ inputs.go-package }} ${{ steps.failonerror.outputs.FAILONERROR }}) ${{ steps.pipe.outputs.PIPE }} ${{ steps.reviewdog-failonerror.outputs.FAILONERROR }}
      shell: bash
      working-directory: ${{ inputs.work-dir }}
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ inputs.github-token }}
